{"version":3,"sources":["components/CardList/CardList.jsx","components/Search/Search.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","lazy","props","monsters","id","fallback","map","monster","index","key","onChange","placeholder","inputRef","React","useRef","useEffect","current","focus","onSearchValueChange","value","className","type","ref","target","role","viewBox","width","height","fill","stroke","strokeLinecap","strokeLinejoin","strokeWidth","cx","cy","r","d","App","useState","setMonsters","filterValue","setFilterValue","fetch","then","res","json","users","monstersToRender","slice","filter","name","match","RegExp","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0QAIMA,G,YAAOC,gBAAK,kBAAM,iCAET,WAAAC,GAAU,IACfC,EAAaD,EAAbC,SACR,OACE,yBAAKC,GAAG,aACN,kBAAC,WAAD,CAAUC,SAAU,4CACjBF,EAASG,KAAI,SAACC,EAASC,GACtB,OAAO,kBAACR,EAAD,eAAMS,IAAG,kBAAaD,IAAaD,UCTrC,G,MAAA,YAAgC,IAA7BG,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YACpBC,EAAWC,IAAMC,SACvBD,IAAME,WAAU,WACdH,EAASI,QAAQC,UAChB,IACH,IAAMC,EAAsB,SAAAC,GAC1BT,GAAYA,EAASS,IAEvB,OACE,yBAAKC,UAAU,kBACb,yBAAKA,UAAU,oBACb,2BACEA,UAAU,eACVC,KAAK,SACLV,YAAaA,EACbW,IAAKV,EACLF,SAAU,gBAAaS,EAAb,EAAGI,OAAUJ,MAAb,OAA2BD,EAAoBC,MAE3D,yBACEK,KAAK,eACLJ,UAAU,WACVK,QAAQ,YACRC,MAAM,KACNC,OAAO,KACPC,KAAK,OACLC,OAAO,eACPC,cAAc,QACdC,eAAe,QACfC,YAAY,KAEZ,4BAAQC,GAAG,KAAKC,GAAG,KAAKC,EAAE,OAC1B,0BAAMC,EAAE,uBCFHC,MA3Bf,WAAgB,IAAD,EACmBxB,IAAMyB,SAAS,IADlC,mBACNnC,EADM,KACIoC,EADJ,OAEyB1B,IAAMyB,SAAS,IAFxC,mBAENE,EAFM,KAEOC,EAFP,KAIb5B,IAAME,WAAU,WACd2B,MAAM,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OAAIP,EAAYO,QAC5B,IAEH,IAAMC,EAAmB5C,EACtB6C,QACAC,QAAO,SAAA1C,GAAO,OAAIA,EAAQ2C,KAAKC,MAAM,IAAIC,OAAOZ,EAAa,UAMhE,OACE,yBAAKpB,UAAU,OACb,wBAAIA,UAAU,SAAd,oBACA,kBAAC,EAAD,CAAQV,SAPS,SAAA8B,GACnBC,EAAeD,IAMmB7B,YAAW,cAC3C,kBAAC,EAAD,CAAUR,SAAU4C,MCfNM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASL,MACvB,2DCZNM,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.642d2377.chunk.js","sourcesContent":["import React, { lazy, Suspense } from \"react\";\n// (()=>import Card from \"../Card/Card\")\nimport \"./CardList.css\";\n\nconst Card = lazy(() => import(\"../Card/Card\"));\n\nexport default props => {\n  const { monsters } = props;\n  return (\n    <div id=\"card-list\">\n      <Suspense fallback={<div>Loading...</div>}>\n        {monsters.map((monster, index) => {\n          return <Card key={`monster-${index}`} {...monster} />;\n        })}\n      </Suspense>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./Search.css\";\n\nexport default ({ onChange, placeholder }) => {\n  const inputRef = React.useRef();\n  React.useEffect(() => {\n    inputRef.current.focus();\n  }, []);\n  const onSearchValueChange = value => {\n    onChange && onChange(value);\n  };\n  return (\n    <div className=\"search-wrapper\">\n      <div className=\"search-container\">\n        <input\n          className=\"search-input\"\n          type=\"search\"\n          placeholder={placeholder}\n          ref={inputRef}\n          onChange={({ target: { value } }) => onSearchValueChange(value)}\n        ></input>\n        <svg\n          role=\"presentation\"\n          className=\"i-search\"\n          viewBox=\"0 0 32 32\"\n          width=\"14\"\n          height=\"14\"\n          fill=\"none\"\n          stroke=\"currentcolor\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeWidth=\"3\"\n        >\n          <circle cx=\"14\" cy=\"14\" r=\"12\" />\n          <path d=\"M23 23 L30 30\" />\n        </svg>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport CardList from \"./components/CardList/CardList\";\nimport Search from \"./components/Search/Search\";\n\nfunction App() {\n  const [monsters, setMonsters] = React.useState([]);\n  const [filterValue, setFilterValue] = React.useState(\"\");\n\n  React.useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(res => res.json())\n      .then(users => setMonsters(users));\n  }, []);\n\n  const monstersToRender = monsters\n    .slice()\n    .filter(monster => monster.name.match(new RegExp(filterValue, \"ig\")));\n\n  const onFilterData = filterValue => {\n    setFilterValue(filterValue);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">Monsters Rolodex</h1>\n      <Search onChange={onFilterData} placeholder={`Search...`} />\n      <CardList monsters={monstersToRender}></CardList>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}